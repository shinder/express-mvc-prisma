generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ab_likes {
  like_id      Int          @id @default(autoincrement())
  member_id    Int
  ab_id        Int
  created_at   DateTime     @default(now()) @db.DateTime(0)
  members      members      @relation(fields: [member_id], references: [member_id], onDelete: Cascade, map: "ab_likes_ibfk_1")
  address_book address_book @relation(fields: [ab_id], references: [ab_id], onDelete: Cascade, map: "ab_likes_ibfk_2")

  @@unique([member_id, ab_id], map: "member_id_2")
  @@index([ab_id], map: "ab_id")
  @@index([member_id], map: "member_id")
}

model address_book {
  ab_id      Int        @id @default(autoincrement())
  name       String     @db.VarChar(255)
  email      String     @db.VarChar(255)
  mobile     String     @db.VarChar(255)
  birthday   DateTime?  @db.Date
  address    String     @db.VarChar(255)
  created_at DateTime   @default(now()) @db.DateTime(0)
  ab_likes   ab_likes[]
}

model categories {
  category_id      Int          @id @default(autoincrement())
  name             String       @db.VarChar(30)
  parent_id        Int?
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [category_id], onDelete: Restrict, onUpdate: Restrict, map: "categories_ibfk_1")
  other_categories categories[] @relation("categoriesTocategories")
  products         products[]

  @@index([parent_id], map: "parent_sid")
}

model members {
  member_id     Int        @id @default(autoincrement())
  email         String     @unique(map: "email") @db.VarChar(100)
  password_hash String     @db.VarChar(100)
  mobile        String?    @db.VarChar(30)
  nickname      String     @db.VarChar(30)
  create_at     DateTime   @db.DateTime(0)
  ab_likes      ab_likes[]
  orders        orders[]
}

model my_sessions {
  session_id String  @id @db.VarChar(128)
  expires    Int     @db.UnsignedInt
  data       String? @db.MediumText
}

model order_details {
  od_id      Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  price      Int
  quantity   Int
  orders     orders   @relation(fields: [order_id], references: [order_id], onUpdate: Restrict, map: "order_details_ibfk_1")
  products   products @relation(fields: [product_id], references: [product_id], onUpdate: Restrict, map: "order_details_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model orders {
  order_id      Int             @id @default(autoincrement())
  member_id     Int
  amount        Int
  ordered_at    DateTime        @db.DateTime(0)
  order_details order_details[]
  members       members         @relation(fields: [member_id], references: [member_id], onUpdate: Restrict, map: "orders_ibfk_1")

  @@index([member_id], map: "member_id")
}

model products {
  product_id    Int             @id @default(autoincrement())
  author        String          @db.VarChar(50)
  book_name     String          @db.VarChar(60)
  category_id   Int
  publish_date  DateTime        @db.Date
  pages         Int
  price         Int
  isbn          String          @unique(map: "isbn") @db.VarChar(30)
  order_details order_details[]
  categories    categories      @relation(fields: [category_id], references: [category_id], onUpdate: Restrict, map: "products_ibfk_1")

  @@index([category_id], map: "category_id")
}

model sessions {
  session_id String  @id @db.VarChar(128)
  expires    Int     @db.UnsignedInt
  data       String? @db.MediumText
}
