<script src="https://cdn.jsdelivr.net/npm/echarts@5.6.0/dist/echarts.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js"></script>
<script>
  // ************* Navbar 主題選擇器 *************
  const themeDropdown = document.querySelector("details.my-theme-selector");
  const currentThemeIndicator = document.getElementById("currentTheme");
  const themeItems = document.querySelectorAll(".menu a[data-theme]");
  
  // 主題切換功能 - 簡化版本
  function changeTheme(theme) {
    // 更改 html 元素的 data-theme 屬性
    document.documentElement.setAttribute("data-theme", theme);
    
    // 儲存到 Cookies
    Cookies.set("preferredTheme", theme, {expires: 365});
    
    // 批量更新 UI
    updateThemeUI(theme);
    
    // 關閉下拉選單
    themeDropdown.removeAttribute("open");
    
    // 防止預設連結行為
    event.preventDefault();
    return false;
  }

  // 統一的 UI 更新函數
  function updateThemeUI(theme) {
    // 更新主題指示器
    currentThemeIndicator.textContent = theme;
    currentThemeIndicator.className = `badge badge-sm ml-1 badge-${
      theme === "dark" ? "neutral" : "primary"
    }`;
    
    // 更新選中狀態 - 使用緩存的元素
    themeItems.forEach(item => {
      item.classList.toggle("active", item.dataset.theme === theme);
    });
  }

  // 頁面載入時初始化主題
  function initializeTheme() {
    const savedTheme = Cookies.get("preferredTheme") || "retro";

    // 應用主題
    document.documentElement.setAttribute("data-theme", savedTheme);
    updateThemeUI(savedTheme);
  }

  // 點擊外部時自動收合下拉選單
  function setupDropdownAutoClose() {
    document.addEventListener("click", function (event) {
      // 尋找所有 details 元素（下拉選單）
      const allDetails = document.querySelectorAll("details[open]");

      allDetails.forEach((detail) => {
        // 檢查點擊是否在此下拉選單外部
        if (!detail.contains(event.target)) {
          detail.removeAttribute("open");
        }
      });
    });
  }

  // DOM 準備就緒時執行
  document.addEventListener("DOMContentLoaded", function () {
    initializeTheme();
    setupDropdownAutoClose();
  });

  // ************* 統一錯誤處理機制 *************
  
  // 創建錯誤提示模態框 (如果不存在)
  function createErrorModal() {
    if (document.getElementById('errorModal')) return;
    
    const modal = document.createElement('dialog');
    modal.id = 'errorModal';
    modal.className = 'modal';
    modal.innerHTML = `
      <div class="modal-box">
        <h3 class="font-bold text-lg mb-4 text-error">操作失敗</h3>
        <div class="alert alert-error mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span id="errorMessage">發生未知錯誤，請稍後再試</span>
        </div>
        <div class="modal-action">
          <form method="dialog">
            <button class="btn btn-primary">確定</button>
          </form>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }

  // 統一的錯誤處理函數
  function handleApiError(error, context = '操作') {
    console.error(`${context}錯誤:`, error);
    
    createErrorModal();
    const modal = document.getElementById('errorModal');
    const messageElement = document.getElementById('errorMessage');
    
    let message = `${context}失敗，請稍後再試`;
    
    // 根據錯誤類型自定義訊息
    if (error.message) {
      if (error.message.includes('fetch')) {
        message = '網路連線錯誤，請檢查網路連線';
      } else if (error.message.includes('JSON')) {
        message = '伺服器回應格式錯誤';
      } else {
        message = error.message;
      }
    } else if (typeof error === 'string') {
      message = error;
    }
    
    messageElement.textContent = message;
    modal.showModal();
  }

  // 統一的 API 呼叫函數
  async function apiRequest(url, options = {}, context = '操作') {
    try {
      const response = await fetch(url, options);

      if (!response.ok) {
        console.warn(`HTTP ${response.status}: ${response.statusText}`);
        // throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.success === false) {
        console.warn(data.message || `${context}失敗`)
        // throw new Error(data.message || `${context}失敗`);
      }
      
      return data;
    } catch (error) {
      handleApiError(error, context);
      throw error; // 重新拋出錯誤，讓呼叫方可以選擇是否進一步處理
    }
  }

  // 統一的成功提示函數
  function showSuccessMessage(message, autoClose = 3000) {
    // 創建成功提示 (簡單的 toast 樣式)
    const toast = document.createElement('div');
    toast.className = 'alert alert-success fixed top-4 right-4 z-50 w-auto shadow-lg';
    toast.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
      </svg>
      <span>${message}</span>
    `;
    
    document.body.appendChild(toast);
    
    // 自動移除提示
    if (autoClose > 0) {
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, autoClose);
    }
    
    return toast;
  }
</script>
